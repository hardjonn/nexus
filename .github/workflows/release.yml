name: Check Version and Create Release Draft

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_version.outputs.version }}
      version_changed: ${{ steps.compare_version.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to compare package.json with previous commit

      - name: Get current app version from package.json
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"

      - name: Get previous package.json from history
        id: get_previous_package_json
        run: |
          git show HEAD~1:package.json > previous_package.json || true

      - name: Get previous app version
        id: get_previous_version
        run: |
          if [ -f previous_package.json ]; then
            PREVIOUS_VERSION=$(node -p "require('./previous_package.json').version")
            echo "previous_version=$PREVIOUS_VERSION" >> "$GITHUB_OUTPUT"
          else
            echo "previous_version=" >> "$GITHUB_OUTPUT"
          fi

      - name: Compare versions
        id: compare_version
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.version }}"
          PREVIOUS_VERSION="${{ steps.get_previous_version.outputs.previous_version }}"
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "version has changed!"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "version has NOT changed."
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Node.js
        if: steps.compare_version.outputs.changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0' # Or your desired Node.js version

      - name: Install dependencies
        if: steps.compare_version.outputs.changed == 'true'
        run: npm ci # Use npm ci for clean installs in CI environments

      - name: Build artifact
        if: steps.compare_version.outputs.changed == 'true'
        run: npm run build:linux
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive production build
        if: steps.compare_version.outputs.changed == 'true'
        run: zip -r app-build-${{ steps.get_version.outputs.version }}.zip dist/

      - name: Upload Release Asset
        if: steps.compare_version.outputs.changed == 'true'
        id: upload-release-asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }} # The tag associated with the draft release
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false # Important: create as a draft`
          prerelease: false
          body: |
            New version ${{ steps.get_version.outputs.version }} has been released.
          files: |
            app-build-${{ steps.get_version.outputs.version }}.zip
            dist/latest-linux.yml
            dist/nexus-${{ steps.get_version.outputs.version }}.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
