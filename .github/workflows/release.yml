name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to compare package.json with previous commit

      - name: Get current app version from package.json
        id: get_current_version
        run: |
          if [ ! -f package.json ]; then
            echo "package.json not found!"
            exit 1
          fi
          CURRENT_VERSION=$(jq -r .version package.json 2>/dev/null)
          if [ -z "$CURRENT_VERSION" ] || [ "$CURRENT_VERSION" == "null" ]; then
            echo "Could not extract version from current package.json"
            exit 1
          fi
          echo "CURRENT_APP_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current package.json version: $CURRENT_VERSION"

      - name: Get previous package.json from history
        id: get_previous_package_json
        run: |
          git show HEAD~1:package.json > previous_package.json || true

      - name: Get previous app version from package.json
        id: get_previous_version
        run: |
          if [ ! -f previous_package.json ]; then
            echo "previous_package.json not found!"
            exit 1
          fi
          PREVIOUS_VERSION=$(jq -r .version previous_package.json 2>/dev/null)
          if [ -z "$PREVIOUS_VERSION" ] || [ "$PREVIOUS_VERSION" == "null" ]; then
            echo "Could not extract version from previous package.json"
            exit 1
          fi
          echo "PREVIOUS_APP_VERSION=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "Previous package.json version: $PREVIOUS_VERSION"

      - name: Compare versions
        id: compare_version
        run: |
          CURRENT_VERSION="${{ steps.get_current_version.outputs.CURRENT_APP_VERSION }}"
          PREVIOUS_VERSION="${{ steps.get_previous_version.outputs.PREVIOUS_APP_VERSION }}"
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "version has changed!"
            echo "VERSION_CHANGED=true" >> "$GITHUB_OUTPUT"
          else
            echo "version has NOT changed."
            echo "VERSION_CHANGED=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Node.js
        if: steps.compare_version.outputs.VERSION_CHANGED == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0' # Or your desired Node.js version

      - name: Install dependencies
        if: steps.compare_version.outputs.VERSION_CHANGED == 'true'
        run: npm ci # Use npm ci for clean installs in CI environments

      - name: Build artifact
        if: steps.compare_version.outputs.VERSION_CHANGED == 'true'
        run: npm run build:linux
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List files in the dist directory
        if: steps.compare_version.outputs.VERSION_CHANGED == 'true'
        run: ls -la dist

      - name: Upload Release Asset
        if: steps.compare_version.outputs.VERSION_CHANGED == 'true'
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_current_version.outputs.CURRENT_APP_VERSION }} # The tag associated with the draft release
          name: Release v${{ steps.get_current_version.outputs.CURRENT_APP_VERSION }}
          draft: false # Important: create as a draft`
          prerelease: false
          body: |
            New version ${{ steps.get_current_version.outputs.CURRENT_APP_VERSION }} has been released.
          files: |
            dist/latest-linux.yml
            dist/Nexus-${{ steps.get_current_version.outputs.CURRENT_APP_VERSION }}.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
